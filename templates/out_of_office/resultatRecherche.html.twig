{% extends 'base.html.twig' %}


{% block body %}
    <div class = "jumbotron">
        <div class = "container">
        {{ form_start (form)}}
        <dic class="form_row">
            <div class = "col">
            {{ form_row(form.maxPrice)}}
            </div>
            <div class="col">
            {{ form_row(form.horaire)}}
            </div>
            <div class="col">
            <button class="btn btn-primary"> Rechercher </button>
            </div>            
        </div>
        {{ form_end (form)}}
    <div class="container">
            <div class="list" >
                {% for coworking in espaceDeCoworking %}
                    <div class="item js-marker" data-lat="{{coworking.lat}}" data-lng="{{coworking.longitude}}" data-price="{{coworking.prix}}">
                        <a href={{path("detailsRecherche",{id:coworking.id})}}>
                            <img src="{{coworking.url}}" width = "400" height = "260" alt="">
                        </a>
                        <h4> {{coworking.titre}} </h4>
                        <p>
                            Prix de la réservation : {{coworking.prix}} € <br>
                            Adresse : {{coworking.adresse}},{{coworking.ville}} {{coworking.CodePostal}}
                        </p>
                    </div>
                {% endfor %}
            </div>
         <div class="map" id="map">

            <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
            integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A=="
            crossorigin=""/>
            <style>
                #map { height: 70%; }
            </style>

            <script>

            (function(e,t){typeof module!="undefined"&&module.exports?module.exports=t():typeof define=="function"&&define.amd?define(t):this[e]=t()})("$script",function(){function p(e,t){for(var n=0,i=e.length;n<i;++n)if(!t(e[n]))return r;return 1}function d(e,t){p(e,function(e){return t(e),1})}function v(e,t,n){function g(e){return e.call?e():u[e]}function y(){if(!--h){u[o]=1,s&&s();for(var e in f)p(e.split("|"),g)&&!d(f[e],g)&&(f[e]=[])}}e=e[i]?e:[e];var r=t&&t.call,s=r?t:n,o=r?e.join(""):t,h=e.length;return setTimeout(function(){d(e,function t(e,n){if(e===null)return y();!n&&!/^https?:\/\//.test(e)&&c&&(e=e.indexOf(".js")===-1?c+e+".js":c+e);if(l[e])return o&&(a[o]=1),l[e]==2?y():setTimeout(function(){t(e,!0)},0);l[e]=1,o&&(a[o]=1),m(e,y)})},0),v}function m(n,r){var i=e.createElement("script"),u;i.onload=i.onerror=i[o]=function(){if(i[s]&&!/^c|loade/.test(i[s])||u)return;i.onload=i[o]=null,u=1,l[n]=2,r()},i.async=1,i.src=h?n+(n.indexOf("?")===-1?"?":"&")+h:n,t.insertBefore(i,t.lastChild)}var e=document,t=e.getElementsByTagName("head")[0],n="string",r=!1,i="push",s="readyState",o="onreadystatechange",u={},a={},f={},l={},c,h;return v.get=m,v.order=function(e,t,n){(function r(i){i=e.shift(),e.length?v(i,r):v(i,t,n)})()},v.path=function(e){c=e},v.urlArgs=function(e){h=e},v.ready=function(e,t,n){e=e[i]?e:[e];var r=[];return!d(e,function(e){u[e]||r[i](e)})&&p(e,function(e){return u[e]})?t():!function(e){f[e]=f[e]||[],f[e][i](t),n&&n(r)}(e.join("|")),v},v.done=function(e){v([null],e)},v})
            // Production steps of ECMA-262, Edition 6, 22.1.2.1
            if (!Array.from) {
            Array.from = (function () {
                var symbolIterator;
                try {
                    symbolIterator = Symbol.iterator
                        ? Symbol.iterator
                        : 'Symbol(Symbol.iterator)';
                } catch (e) {
                    symbolIterator = 'Symbol(Symbol.iterator)';
                }

                var toStr = Object.prototype.toString;
                var isCallable = function (fn) {
                    return (
                        typeof fn === 'function' ||
                        toStr.call(fn) === '[object Function]'
                    );
                };
                var toInteger = function (value) {
                    var number = Number(value);
                    if (isNaN(number)) return 0;
                    if (number === 0 || !isFinite(number)) return number;
                    return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
                };
                var maxSafeInteger = Math.pow(2, 53) - 1;
                var toLength = function (value) {
                    var len = toInteger(value);
                    return Math.min(Math.max(len, 0), maxSafeInteger);
                };

                var setGetItemHandler = function setGetItemHandler(isIterator, items) {
                    var iterator = isIterator && items[symbolIterator]();
                    return function getItem(k) {
                        return isIterator ? iterator.next() : items[k];
                    };
                };

                var getArray = function getArray(
                    T,
                    A,
                    len,
                    getItem,
                    isIterator,
                    mapFn
                ) {
                    // 16. Let k be 0.
                    var k = 0;

                    // 17. Repeat, while k < len… or while iterator is done (also steps a - h)
                    while (k < len || isIterator) {
                        var item = getItem(k);
                        var kValue = isIterator ? item.value : item;

                        if (isIterator && item.done) {
                            return A;
                        } else {
                            if (mapFn) {
                                A[k] =
                                    typeof T === 'undefined'
                                        ? mapFn(kValue, k)
                                        : mapFn.call(T, kValue, k);
                            } else {
                                A[k] = kValue;
                            }
                        }
                        k += 1;
                    }

                    if (isIterator) {
                        throw new TypeError(
                            'Array.from: provided arrayLike or iterator has length more then 2 ** 52 - 1'
                        );
                    } else {
                        A.length = len;
                    }

                    return A;
                };

                // The length property of the from method is 1.
                return function from(arrayLikeOrIterator /*, mapFn, thisArg */) {
                    // 1. Let C be the this value.
                    var C = this;

                    // 2. Let items be ToObject(arrayLikeOrIterator).
                    var items = Object(arrayLikeOrIterator);
                    var isIterator = isCallable(items[symbolIterator]);

                    // 3. ReturnIfAbrupt(items).
                    if (arrayLikeOrIterator == null && !isIterator) {
                        throw new TypeError(
                            'Array.from requires an array-like object or iterator - not null or undefined'
                        );
                    }

                    // 4. If mapfn is undefined, then let mapping be false.
                    var mapFn = arguments.length > 1 ? arguments[1] : void undefined;
                    var T;
                    if (typeof mapFn !== 'undefined') {
                        // 5. else
                        // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.
                        if (!isCallable(mapFn)) {
                            throw new TypeError(
                                'Array.from: when provided, the second argument must be a function'
                            );
                        }

                        // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.
                        if (arguments.length > 2) {
                            T = arguments[2];
                        }
                    }

                    // 10. Let lenValue be Get(items, "length").
                    // 11. Let len be ToLength(lenValue).
                    var len = toLength(items.length);

                    // 13. If IsConstructor(C) is true, then
                    // 13. a. Let A be the result of calling the [[Construct]] internal method
                    // of C with an argument list containing the single item len.
                    // 14. a. Else, Let A be ArrayCreate(len).
                    var A = isCallable(C) ? Object(new C(len)) : new Array(len);

                    return getArray(
                        T,
                        A,
                        len,
                        setGetItemHandler(isIterator, items),
                        isIterator,
                        mapFn
                    );
                };
            })();
        }
            </script>

            <script>
            //Initialisation de la carte
            let $map = document.querySelector('#map');

            class leafletMap
            {
                constructor ()
                {
                    this.map = null
                    this.bounds = []
                }
                async load (element)
                {
                        return new Promise ((resolve, reject) => 
                        {
                        $script('https://unpkg.com/leaflet@1.3.1/dist/leaflet.js', () =>
                        {
                            this.map = L.map(element);
                                L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}',
                                {
                                    attribution: 'Map data © <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
                                    maxZoom: 18,
                                    id: 'mapbox/streets-v11',
                                    tileSize: 512,
                                    zoomOffset: -1,
                                    accessToken: 'pk.eyJ1Ijoid2VieWMiLCJhIjoiY2pzYnQ0MDByMDMzazRhbnl6NnNrZnVsYiJ9.MQe0cRrJaGs-t4vjt4MXoQ'
                                }).addTo(this.map);
                                resolve()
                            })
                        })

        
                }
            

            addMarker (lat, lng, text)
            {
                let point = [lat, lng]
                this.bounds.push(point)
                return new LeafletMarker(point, text, this.map)
            }

            center ()
            {
                this.map.fitBounds(this.bounds)
            }
        }
            class LeafletMarker
            {
                constructor(point, text, map)
                {
                    this.text = text                
                    this.popup = L.popup({
                        autoClose: false,
                        closeOnEscapeKey: false,
                        closeOnClick: false,
                        closeButton: false,
                        className: 'marker',
                        maxWidth: 400

                    })
                    .setLatLng(point)
                    .setContent(text)
                    .openOn(map)
                }
                setActive ()
                {
                    this.popup.getElement().classList.add('is-active')
                }

                unsetActive ()
                {
                    this.popup.getElement().classList.remove('is-active')
                }

                addEventListener (event,cb)
                {
                    this.popup.addEventListener('add', ()=>{                                     
                     this.popup.getElement().addEventListener(event, cb)
                      })
                }

                setContent (text) {
                    this.popup.setContent(text)
                    this.popup.getElement().classList.add('is-expanded')
                    this.popup.update()
                }

                resetContent () {
                    this.popup.setContent(this.text)
                    this.popup.getElement().classList.add('is-expanded')
                    this.popup.update()
                }
            }
                const initMap = async function ()
                {
                    let map = new leafletMap();
                    let hoverMarker = null
                    let activeMarker = null
                    await map.load($map);
                    Array.from(document.querySelectorAll('.js-marker')).forEach ((item) =>
                    {
                        let marker = map.addMarker(item.dataset.lat, item.dataset.lng, item.dataset.price + '€')
                        item.addEventListener('mouseover', function()
                        {
                            if (hoverMarker !== null)
                            {
                                hoverMarker.unsetActive()
                            }
                            marker.setActive()
                            hoverMarker = marker
                        })
                        item.addEventListener('mouseleave', function(){
                            if (hoverMarker !=null)
                            {
                                hoverMarker.unsetActive()
                            }
                        })
                        marker.addEventListener('click',function () {
                            if ( activeMarker !==null)
                            {
                                activeMarker.resetContent()
                            } 
                            marker.setContent(item.innerHTML)
                            activeMarker = marker
                        }) 
                    })
                    map.center()
                }

            if ($map !== null)
            {
                initMap()
            }
            
            
            </script>
        </div>
    

    </div>



{% endblock %}
{% block footer %}
{% endblock %}